package lights;

import fr.liglab.adele.icasa.device.DeviceListener;
import fr.liglab.adele.icasa.device.GenericDevice;
import fr.liglab.adele.icasa.device.presence.PresenceSensor;
import fr.liglab.adele.icasa.device.light.BinaryLight;

import java.util.*;

import configurations.FollowMeConfiguration;

import static constants.Constants.*;

public class BinaryLightImpl implements DeviceListener, FollowMeConfiguration {

	private int maxLightsToTurnOnPerRoom = 1;
	private PresenceSensor[] presenceSensors;
	private BinaryLight[] binaryLights;

	public void start() {
		System.out.println("Binary light component is starting ...");
	}

	public void bindBinaryLight(BinaryLight binaryLight, Map properties) {
		System.out.println("Bind binary light " + binaryLight.getSerialNumber());
	}

	public void unbindBinaryLight(BinaryLight binaryLight, Map properties) {
		System.out.println("Unbind binary light " + binaryLight.getSerialNumber());
	}

	public void bindPresenceSensor(PresenceSensor presenceSensor, Map properties) {
		System.out.println("Bind presence sensor " + presenceSensor.getSerialNumber());
		presenceSensor.addListener(this);
	}

	public void unbindPresenceSensor(PresenceSensor presenceSensor, Map properties) {
		System.out.println("Unbind presence sensor " + presenceSensor.getSerialNumber());
		presenceSensor.removeListener(this); //..
	}

	public void deviceAdded(GenericDevice genericDevice) {
		System.err.println("This method is not implemented yet ...");
	}

	public void deviceEvent(GenericDevice genericDevice, Object object) {
		System.err.println("This method is not implemented yet ...");
	}

	public void devicePropertyAdded(GenericDevice genericDevice, String name) {
		System.err.println("This method is not implemented yet ...");
	}

	private synchronized List<BinaryLight> getBinaryLightFromLocation(String location) {
		List<BinaryLight> binaryLightsLocation = new ArrayList<BinaryLight>();

		for (BinaryLight binaryLight : binaryLights)
			if (binaryLight.getPropertyValue(LOCATION_PROPERTY_NAME).equals(location))
				binaryLightsLocation.add(binaryLight);

		return binaryLightsLocation;
	}

	public void devicePropertyModified(GenericDevice device, String propertyName, Object oldValue, Object newValue) {
		PresenceSensor presenceSensor = (PresenceSensor) device;

		if (propertyName.equals(PresenceSensor.PRESENCE_SENSOR_SENSED_PRESENCE)) {
			String location = (String) presenceSensor.getPropertyValue(LOCATION_PROPERTY_NAME);

			if (!LOCATION_UNKNOWN.equals(location)) {
				int numberOfLights = maxLightsToTurnOnPerRoom;
				List<BinaryLight> binaryLightFromLocation = getBinaryLightFromLocation(location);

				for (BinaryLight binaryLight : binaryLightFromLocation) {
					if (numberOfLights-- == 0) break;
					if (presenceSensor.getSensedPresence())
						binaryLight.turnOn();
					else
						binaryLight.turnOff();
				}
			}
		}

	}

	public void devicePropertyRemoved(GenericDevice genericDevice, String name) {
		System.err.println("This method is not implemented yet ...");
	}

	public void deviceRemoved(GenericDevice genericDevice) {
		System.err.println("This method is not implemented yet ...");
	}

	public int getMaximumNumberOfLightsToTurnOn() {
		return maxLightsToTurnOnPerRoom;
	}

	public void setMaximumNumberOfLightsToTurnOn(int maximumNumberOfLightsToTurnOn) {
		maxLightsToTurnOnPerRoom = maximumNumberOfLightsToTurnOn;
	}

	public void stop() {
		System.out.println("Binary light component is stopping ...");

		for (PresenceSensor sensor : presenceSensors)
			sensor.removeListener(this);
	}

}
